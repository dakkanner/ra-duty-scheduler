<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="textBox1.Text" xml:space="preserve">
    <value>#
# Dates.txt
# This is the file that contains all the dates to tell the calendar maker when you want to schedule your people.
# Note that any line that begins with '#' is taken as a comment, but it won't understand in-line comments.
#
# Dates explained:
# 	'Start' date begins the line with 'Start', then has a '-' before a single date.
# 		The start date is the first day that you want someone scheduled.
# 	'End' date begins the line with 'End', then has a '-' before a single date.
# 		The end date is the last day that you want someone scheduled.
# 	'Break' dates begins the line with 'Break', then has a '-' before a list of dates separated by commas.
# 		Breaks are where you won't have anyone scheduled.
# 	'Holiday' dates begins the line with 'Holiday', then has a '-' before a list of dates separated by commas.
# 		Holidays are for extending the period of time that anyone on weekend duty will get scheduled. Primarily used for 3-day weekends
#
# Other notes: 
# 	Dates can be in different formats for your convenience
# 	Holidays and breaks can be in multiple lines and any order 
#

Start - 9/22/12
End - 12/7/2012
Breaks - 11/24/2012, 11/25/2012
Breaks - 11/22/2012, 11/23/2012
Holiday - 11/12/2012
</value>
  </data>
  <data name="textBox2.Text" xml:space="preserve">
    <value>#
# PeopleAndGroups.txt
# This is the file that contains all the groups and their members along with which days off they want.
# Note that any line that begins with '#' is taken as a comment, but it won't understand in-line comments.
#
# Groups explained:
# 	Each line that doesn't begin with whitespace is a group name. 
# 	One person from each group will be scheduled for every duty day on the schedule.
# 	Anyone with the same name in multiple groups will be assigned to both groups.
# 	
# 		Groups in this example: Senior RA, Inside Rounds, and Outside Rounds
# 	
# People explained: 
# 	People should be listed after the group name that they belong to.
# 	If any individual wants to request a day off, add '-' after their name followed by the date.
# 	If you have multiple people with the same name, make sure you include a last initial/name to differentiate (see Matt A. and Matt B.)
# 
# Other notes: 
# 	Dates can be in different formats for your convenience
#	If you list one person in multiple groups, they will be scheduled for both groups (see Ashley vs. Matt A. and Matt B.)
# 		If you list requested days off for someone in multiple groups, the program will append those days to their list of days off (see Ashley)
#	Any requested days off will be honored unless every person in that group has the same day listed
# 	If you need multiple shifts per night for the same position, just make two groups with the same people
#

Senior RA
	Michael - 12/4/2012, 8/4/12
	Jessica
	Chris
	Ashley - 12/11/2012
Inside Rounds
    Ashley - 11-10-2012, 9-9-12, 8/8/12 
	Matt A.	
	David
	Sarah
	Brittany - 12/4/2012, 8/4/12, 11-4-2012, 9-4-12 
	Joshua
	Samantha
Outside Rounds
	Matt B. 
	Amanda
	Andrew - 11-4-2012, 9-4-12
	Stephanie
	James- 8/1/12, 12/2/2012, 11-30-2012, 9-2-12
	Jennifer
</value>
  </data>
</root>